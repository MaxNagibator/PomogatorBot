using Microsoft.Extensions.Options;
using PomogatorBot.Web.Commands.Common;
using PomogatorBot.Web.Configuration;
using PomogatorBot.Web.Constants;
using PomogatorBot.Web.Features.Keyboard;
using PomogatorBot.Web.Infrastructure.Entities;
using PomogatorBot.Web.Services;
using System.Text;
using Telegram.Bot.Types;

namespace PomogatorBot.Web.Commands;

public class LastMessagesCommandHandler(
    IOptions<AdminConfiguration> adminOptions,
    BroadcastHistoryService broadcastHistoryService,
    KeyboardFactory keyboardFactory)
    : AdminRequiredCommandHandler(adminOptions), ICommandMetadata
{
    public static CommandMetadata Metadata { get; } = new("lastmessages", "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", true);

    public override string Command => Metadata.Command;

    protected override async Task<BotResponse> HandleAdminCommandAsync(Message message, CancellationToken cancellationToken)
    {
        var count = ParseMessageCount(message.Text);
        var lastBroadcasts = await broadcastHistoryService.GetLastsAsync(count, cancellationToken);
        var statistics = await broadcastHistoryService.GetStatisticsAsync(cancellationToken);

        if (lastBroadcasts.Count == 0)
        {
            var emptyResponse = $"{Emoji.Info} –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç–∞.";
            var emptyKeyboard = keyboardFactory.CreateForLastMessages();
            return new(emptyResponse, emptyKeyboard);
        }

        var responseText = FormatBroadcastsResponse(lastBroadcasts, statistics, count);
        var keyboard = keyboardFactory.CreateForLastMessages();

        return new(responseText, keyboard);
    }

    private static int ParseMessageCount(string? messageText)
    {
        if (string.IsNullOrWhiteSpace(messageText))
        {
            return 1;
        }

        var parts = messageText.Split(' ', StringSplitOptions.RemoveEmptyEntries);

        if (parts.Length < 2)
        {
            return 1;
        }

        if (int.TryParse(parts[1], out var count) && count > 0)
        {
            return Math.Min(count, 50);
        }

        return 1;
    }

    // TODO: –í—ã–Ω–µ—Å—Ç–∏ –∞ –æ–±—â–∏–π –∫–ª–∞—Å—Å
    public static string FormatBroadcastsResponse(List<BroadcastHistory> broadcasts, BroadcastStatistics statistics, int requestedCount)
    {
        var sb = new StringBuilder();

        sb.AppendLine($"{Emoji.History} –ü–æ—Å–ª–µ–¥–Ω–∏–µ {Math.Min(requestedCount, broadcasts.Count)} —Ä–∞—Å—Å—ã–ª–æ–∫:");
        sb.AppendLine();

        sb.AppendLine($"{Emoji.Chart} –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
        sb.AppendLine($"‚ñ´Ô∏è –í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {statistics.Total}");
        sb.AppendLine($"‚ñ´Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {statistics.Completed} {Emoji.Success}");
        sb.AppendLine($"‚ñ´Ô∏è –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {statistics.InProgress} ‚è≥");
        sb.AppendLine($"‚ñ´Ô∏è –ù–µ—É—Å–ø–µ—à–Ω–æ: {statistics.Failed} {Emoji.Error}");
        sb.AppendLine($"‚ñ´Ô∏è –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {statistics.TotalMessagesSent}");
        sb.AppendLine();

        for (var i = 0; i < broadcasts.Count; i++)
        {
            var broadcast = broadcasts[i];

            var statusIcon = broadcast.Status switch
            {
                BroadcastStatus.Completed => Emoji.Success,
                BroadcastStatus.InProgress => "‚è≥",
                BroadcastStatus.Failed => Emoji.Error,
                _ => "‚ùì",
            };

            var messagePreview = TruncateMessage(broadcast.MessageText, 100);

            var duration = broadcast.CompletedAt.HasValue
                ? $" ({(broadcast.CompletedAt.Value - broadcast.StartedAt).TotalSeconds:F1}—Å)"
                : " (–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)";

            sb.AppendLine($"{i + 1}. {statusIcon} {broadcast.StartedAt:dd.MM.yyyy HH:mm}{duration}");
            sb.AppendLine($"   üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {broadcast.TotalRecipients}");
            sb.AppendLine($"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {broadcast.SuccessfulDeliveries}");
            sb.AppendLine($"   ‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: {broadcast.FailedDeliveries}");
            sb.AppendLine($"   üí¨ {messagePreview}");

            if (!string.IsNullOrEmpty(broadcast.ErrorSummary))
            {
                sb.AppendLine($"   üö® –û—à–∏–±–∫–∏: {broadcast.ErrorSummary}");
            }

            if (i < broadcasts.Count - 1)
            {
                sb.AppendLine();
            }
        }

        return sb.ToString();
    }

    private static string TruncateMessage(string message, int maxLength)
    {
        if (string.IsNullOrEmpty(message) || message.Length <= maxLength)
        {
            return message;
        }

        return message[..(maxLength - 3)] + "...";
    }
}
