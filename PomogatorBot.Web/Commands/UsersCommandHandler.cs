using PomogatorBot.Web.Commands.Common;
using PomogatorBot.Web.Services;
using Telegram.Bot.Types;

namespace PomogatorBot.Web.Commands;

public class UsersCommandHandler(
    IConfiguration configuration,
    UserService userService)
    : BotAdminCommandHandler(configuration), ICommandMetadata
{
    public static CommandMetadata Metadata { get; } = new("users", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", true);

    public override string Command => Metadata.Command;

    public override async Task<BotResponse> HandleAsync(Message message, CancellationToken cancellationToken)
    {
        if (IsAdminMessage(message) == false)
        {
            return new("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.");
        }

        var users = await userService.GetAllUsersAsync(cancellationToken);

        if (users.Count == 0)
        {
            return new("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
        }

        var userRows = users.Select(user =>
        {
            var aliasInfo = string.IsNullOrEmpty(user.Alias) ? string.Empty : $" | –ü—Å–µ–≤–¥–æ–Ω–∏–º: {user.Alias}";
            return $"üë§ ID: {user.UserId} | @{user.Username} | {user.FirstName} {user.LastName}{aliasInfo}";
        });

        var usersList = string.Join("\n", userRows);

        var responseText = $"""
                            üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({users.Count}):

                            {usersList}

                            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /{SetAliasCommandHandler.Metadata.Command} ID –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞
                            """;

        return new(responseText);
    }
}
