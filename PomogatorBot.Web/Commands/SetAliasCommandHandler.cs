using PomogatorBot.Web.Commands.Common;
using PomogatorBot.Web.Services;
using Telegram.Bot.Types;

namespace PomogatorBot.Web.Commands;

public class SetAliasCommandHandler(
    IConfiguration configuration,
    UserService userService,
    ILogger<SetAliasCommandHandler> logger)
    : BotAdminCommandHandler(configuration), ICommandMetadata
{
    public static CommandMetadata Metadata { get; } = new("setalias", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", true);

    public override string Command => Metadata.Command;

    public override async Task<BotResponse> HandleAsync(Message message, CancellationToken cancellationToken)
    {
        if (IsAdminMessage(message) == false)
        {
            return new("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", new());
        }

        var length = Metadata.Command.Length + 1;

        if (message.Text?.Length <= length)
        {
            return new(GetHelpMessage(), new());
        }

        var messageText = message.Text?[length..]?.Trim();

        if (string.IsNullOrEmpty(messageText))
        {
            return new(GetHelpMessage(), new());
        }

        var parts = messageText.Split(' ', 2);

        if (parts.Length < 2)
        {
            return new("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º.", new());
        }

        if (long.TryParse(parts[0], out var userId) == false)
        {
            return new("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.", new());
        }

        var alias = parts[1].Trim();

        if (string.IsNullOrWhiteSpace(alias))
        {
            return new("–ü—Å–µ–≤–¥–æ–Ω–∏–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", new());
        }

        var success = await userService.SetAliasAsync(userId, alias, cancellationToken);

        if (success == false)
        {
            return new($"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {userId} –Ω–µ –Ω–∞–π–¥–µ–Ω.", new());
        }

        logger.LogInformation("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}: {Alias}", userId, alias);
        return new($"–ü—Å–µ–≤–¥–æ–Ω–∏–º '{alias}' —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userId}.", new());
    }

    private static string GetHelpMessage()
    {
        const string Message = """
                               üè∑Ô∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞:

                               –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
                               /setalias ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Å–µ–≤–¥–æ–Ω–∏–º

                               –ü—Ä–∏–º–µ—Ä:
                               /setalias 123456789 –í–∞—Å–∏–ª–∏–π
                               """;

        return Message;
    }
}
