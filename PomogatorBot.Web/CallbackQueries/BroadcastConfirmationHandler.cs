using PomogatorBot.Web.CallbackQueries.Common;
using PomogatorBot.Web.Services;
using Telegram.Bot.Types;

namespace PomogatorBot.Web.CallbackQueries;

public class BroadcastConfirmationHandler(
    BroadcastPendingService broadcastPendingService,
    UserService userService,
    ILogger<BroadcastConfirmationHandler> logger) : ICallbackQueryHandler
{
    public const string ConfirmPrefix = "broadcast_confirm_";
    public const string CancelPrefix = "broadcast_cancel_";

    private static readonly IReadOnlyDictionary<string, string> PrefixActions = new Dictionary<string, string>
    {
        { ConfirmPrefix, "confirm" },
        { CancelPrefix, "cancel" },
    };

    public bool CanHandle(string callbackData)
    {
        return CallbackDataParser.TryParseWithMultiplePrefixes(callbackData, PrefixActions, out _, out _);
    }

    public async Task<BotResponse> HandleCallbackAsync(CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        var userId = callbackQuery.From.Id;
        var callbackData = callbackQuery.Data!;

        if (CallbackDataParser.TryParseWithMultiplePrefixes(callbackData, PrefixActions, out var action, out var pendingId) == false)
        {
            logger.LogWarning("Unknown broadcast callback action: {CallbackData}", callbackData);
            return new("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ");
        }

        var pendingBroadcast = broadcastPendingService.GetPendingBroadcast(pendingId);

        if (pendingBroadcast == null)
        {
            return new("‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É.");
        }

        if (pendingBroadcast.AdminUserId != userId)
        {
            logger.LogWarning("User {UserId} tried to access broadcast created by {AdminUserId}", userId, pendingBroadcast.AdminUserId);
            return new("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.");
        }

        return action switch
        {
            "confirm" => await HandleConfirmBroadcast(pendingBroadcast, cancellationToken),
            "cancel" => HandleCancelBroadcast(pendingBroadcast),
            _ => new("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
        };
    }

    private async Task<BotResponse> HandleConfirmBroadcast(PendingBroadcast pendingBroadcast, CancellationToken cancellationToken)
    {
        try
        {
            logger.LogInformation("Executing broadcast {BroadcastId} for admin {AdminUserId}",
                pendingBroadcast.Id, pendingBroadcast.AdminUserId);

            var response = await userService.NotifyAsync(pendingBroadcast.Message,
                pendingBroadcast.Subscribes,
                pendingBroadcast.Entities,
                pendingBroadcast.AdminUserId,
                cancellationToken);

            broadcastPendingService.RemovePendingBroadcast(pendingBroadcast.Id);

            var successMessage = $"""
                                  ‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!

                                  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
                                  üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {response.TotalUsers}
                                  ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {response.SuccessfulSends}
                                  ‚ùå –° –æ—à–∏–±–∫–æ–π: {response.FailedSends}
                                  """;

            logger.LogInformation("Broadcast {BroadcastId} completed successfully. Success: {Success}, Failed: {Failed}, Total: {Total}",
                pendingBroadcast.Id, response.SuccessfulSends, response.FailedSends, response.TotalUsers);

            return new(successMessage);
        }
        catch (Exception exception)
        {
            logger.LogError(exception, "Error executing broadcast {BroadcastId}", pendingBroadcast.Id);
            return new("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }

    private BotResponse HandleCancelBroadcast(PendingBroadcast pendingBroadcast)
    {
        broadcastPendingService.RemovePendingBroadcast(pendingBroadcast.Id);

        logger.LogInformation("Broadcast {BroadcastId} cancelled by admin {AdminUserId}",
            pendingBroadcast.Id, pendingBroadcast.AdminUserId);

        return new("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
    }
}
