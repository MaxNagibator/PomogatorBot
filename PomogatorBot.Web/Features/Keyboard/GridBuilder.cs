using Telegram.Bot.Types.ReplyMarkups;

namespace PomogatorBot.Web.Features.Keyboard;

/// <summary>
/// –°—Ç—Ä–æ–∏—Ç–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π fluent API
/// </summary>
public class GridBuilder
{
    private readonly KeyboardBuilder _keyboardBuilder;
    private readonly KeyboardBuilderOptions _options;
    private readonly List<InlineKeyboardButton> _currentRow = [];

    /// <summary>
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä GridBuilder
    /// </summary>
    /// <param name="keyboardBuilder">–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã</param>
    /// <param name="options">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</param>
    internal GridBuilder(KeyboardBuilder keyboardBuilder, KeyboardBuilderOptions options)
    {
        _keyboardBuilder = keyboardBuilder ?? throw new ArgumentNullException(nameof(keyboardBuilder));
        _options = options ?? throw new ArgumentNullException(nameof(options));
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç callback-–∫–Ω–æ–ø–∫—É –≤ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É —Å–µ—Ç–∫–∏
    /// </summary>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="callbackData">–î–∞–Ω–Ω—ã–µ callback</param>
    /// <returns>–≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä GridBuilder –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤</returns>
    public GridBuilder AddButton(string text, string callbackData)
    {
        _keyboardBuilder.ValidateButtonText(text);
        _keyboardBuilder.ValidateCallbackData(callbackData);
        ValidateRowCapacity();

        _currentRow.Add(InlineKeyboardButton.WithCallbackData(text, callbackData));
        return this;
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç callback-–∫–Ω–æ–ø–∫—É —Å —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É —Å–µ—Ç–∫–∏
    /// </summary>
    /// <param name="emoji">–≠–º–æ–¥–∑–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="callbackData">–î–∞–Ω–Ω—ã–µ callback</param>
    /// <returns>–≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä GridBuilder –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤</returns>
    /// <remarks>
    /// –≠–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ï—Å–ª–∏ —ç–º–æ–¥–∑–∏ –ø—É—Å—Ç–æ–µ –∏–ª–∏ null, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.<br />
    /// –ü—Ä–∏–º–µ—Ä: AddButton("üéØ", "–¶–µ–ª—å", "target") —Å–æ–∑–¥–∞—Å—Ç –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º "üéØ –¶–µ–ª—å".<br />
    /// –ú–µ—Ç–æ–¥ —Å–ª–µ–¥—É–µ—Ç —Ç–µ–º –∂–µ –ø—Ä–∞–≤–∏–ª–∞–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏, —á—Ç–æ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π AddButton –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏.
    /// </remarks>
    public GridBuilder AddButton(string emoji, string text, string callbackData)
    {
        var buttonText = string.IsNullOrEmpty(emoji) ? text : $"{emoji} {text}";
        return AddButton(buttonText, callbackData);
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç URL-–∫–Ω–æ–ø–∫—É –≤ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É —Å–µ—Ç–∫–∏
    /// </summary>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="url">URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è</param>
    /// <returns>–≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä GridBuilder –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤</returns>
    public GridBuilder AddUrlButton(string text, string url)
    {
        _keyboardBuilder.ValidateButtonText(text);
        _keyboardBuilder.ValidateUrl(url);
        ValidateRowCapacity();

        _currentRow.Add(InlineKeyboardButton.WithUrl(text, url));
        return this;
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É Web App –≤ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É —Å–µ—Ç–∫–∏
    /// </summary>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="webAppUrl">URL Web App</param>
    /// <returns>–≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä GridBuilder –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤</returns>
    public GridBuilder AddWebAppButton(string text, string webAppUrl)
    {
        _keyboardBuilder.ValidateButtonText(text);
        _keyboardBuilder.ValidateUrl(webAppUrl);
        ValidateRowCapacity();

        _currentRow.Add(InlineKeyboardButton.WithWebApp(text, new(webAppUrl)));
        return this;
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è inline-–∑–∞–ø—Ä–æ—Å–∞ –≤ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É —Å–µ—Ç–∫–∏
    /// </summary>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="query">Inline-–∑–∞–ø—Ä–æ—Å</param>
    /// <returns>–≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä GridBuilder –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤</returns>
    public GridBuilder AddSwitchInlineButton(string text, string query)
    {
        _keyboardBuilder.ValidateButtonText(text);
        ValidateRowCapacity();

        _currentRow.Add(InlineKeyboardButton.WithSwitchInlineQuery(text, query));
        return this;
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è inline-–∑–∞–ø—Ä–æ—Å–∞ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ –≤ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É —Å–µ—Ç–∫–∏
    /// </summary>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="query">Inline-–∑–∞–ø—Ä–æ—Å</param>
    /// <returns>–≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä GridBuilder –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤</returns>
    public GridBuilder AddSwitchInlineCurrentChatButton(string text, string query)
    {
        _keyboardBuilder.ValidateButtonText(text);
        ValidateRowCapacity();

        _currentRow.Add(InlineKeyboardButton.WithSwitchInlineQueryCurrentChat(text, query));
        return this;
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É —Å –∏–∫–æ–Ω–∫–æ–π –≤ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É —Å–µ—Ç–∫–∏
    /// </summary>
    /// <param name="icon">–ò–∫–æ–Ω–∫–∞ –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="callbackData">–î–∞–Ω–Ω—ã–µ callback</param>
    /// <returns>–≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä GridBuilder –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤</returns>
    public GridBuilder AddButtonWithIcon(string icon, string text, string callbackData)
    {
        var displayText = $"{icon} {text}";
        return AddButton(displayText, callbackData);
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –≤ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É —Å–µ—Ç–∫–∏, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ
    /// </summary>
    /// <param name="condition">–£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</param>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="callbackData">–î–∞–Ω–Ω—ã–µ callback</param>
    /// <returns>–≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä GridBuilder –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤</returns>
    public GridBuilder AddButtonIf(bool condition, string text, string callbackData)
    {
        if (condition)
        {
            AddButton(text, callbackData);
        }

        return this;
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –≤ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É —Å–µ—Ç–∫–∏, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –ª–æ–∂–Ω–æ
    /// </summary>
    /// <param name="condition">–£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</param>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="callbackData">–î–∞–Ω–Ω—ã–µ callback</param>
    /// <returns>–≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä GridBuilder –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤</returns>
    public GridBuilder AddButtonUnless(bool condition, string text, string callbackData)
    {
        return AddButtonIf(!condition, text, callbackData);
    }

    /// <summary>
    /// –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ –≤ —Å–µ—Ç–∫–µ
    /// </summary>
    /// <returns>–≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä GridBuilder –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤</returns>
    public GridBuilder End()
    {
        if (_currentRow.Count > 0)
        {
            _keyboardBuilder.AddButtonRowInternal([.. _currentRow]);
            _currentRow.Clear();
        }

        return this;
    }

    /// <summary>
    /// –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    /// </summary>
    /// <returns>–≠–∫–∑–µ–º–ø–ª—è—Ä InlineKeyboardMarkup</returns>
    public InlineKeyboardMarkup Build()
    {
        if (_currentRow.Count > 0)
        {
            End();
        }

        return _keyboardBuilder.Build();
    }

    private void ValidateRowCapacity()
    {
        if (_currentRow.Count >= _options.MaxButtonsPerRow)
        {
            _keyboardBuilder.HandleValidationFailure($"–°—Ç—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ {_options.MaxButtonsPerRow} –∫–Ω–æ–ø–æ–∫");
        }
    }
}
