using PomogatorBot.Web.CallbackQueries;
using PomogatorBot.Web.Constants;
using System.Text;
using Telegram.Bot.Types.ReplyMarkups;

namespace PomogatorBot.Web.Features.Keyboard;

/// <summary>
/// Fluent-—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegram inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä
/// </summary>
public class KeyboardBuilder
{
    private readonly List<InlineKeyboardButton[]> _buttons = [];
    private readonly KeyboardBuilderOptions _options;

    /// <summary>
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä KeyboardBuilder —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    /// </summary>
    /// <param name="options">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π</param>
    private KeyboardBuilder(KeyboardBuilderOptions options)
    {
        _options = options ?? throw new ArgumentNullException(nameof(options));
    }

    /// <summary>
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä KeyboardBuilder —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    /// </summary>
    private KeyboardBuilder() : this(new())
    {
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    /// </summary>
    public int RowCount => _buttons.Count;

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    /// </summary>
    public int ButtonCount => _buttons.Sum(row => row.Length);

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä KeyboardBuilder
    /// </summary>
    /// <returns>–ù–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä KeyboardBuilder</returns>
    public static KeyboardBuilder Create()
    {
        return new();
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä KeyboardBuilder —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    /// </summary>
    /// <param name="options">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</param>
    /// <returns>–ù–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä KeyboardBuilder</returns>
    public static KeyboardBuilder Create(KeyboardBuilderOptions options)
    {
        return new(options);
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É callback-–∫–Ω–æ–ø–∫—É –∫–∞–∫ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    /// </summary>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="callbackData">–î–∞–Ω–Ω—ã–µ callback</param>
    /// <returns>–≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä KeyboardBuilder –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤</returns>
    public KeyboardBuilder AddButton(string text, string callbackData)
    {
        ValidateButtonText(text);
        ValidateCallbackData(callbackData);

        _buttons.Add([InlineKeyboardButton.WithCallbackData(text, callbackData)]);
        return this;
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É callback-–∫–Ω–æ–ø–∫—É —Å —ç–º–æ–¥–∑–∏ –∫–∞–∫ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    /// </summary>
    /// <param name="emoji">–≠–º–æ–¥–∑–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="callbackData">–î–∞–Ω–Ω—ã–µ callback</param>
    /// <returns>–≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä KeyboardBuilder –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤</returns>
    /// <remarks>
    /// –≠–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ï—Å–ª–∏ —ç–º–æ–¥–∑–∏ –ø—É—Å—Ç–æ–µ –∏–ª–∏ null, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.<br />
    /// –ü—Ä–∏–º–µ—Ä: AddButton("üéØ", "–¶–µ–ª—å", "target") —Å–æ–∑–¥–∞—Å—Ç –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º "üéØ –¶–µ–ª—å".<br />
    /// –ú–µ—Ç–æ–¥ —Å–ª–µ–¥—É–µ—Ç —Ç–µ–º –∂–µ –ø—Ä–∞–≤–∏–ª–∞–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏, —á—Ç–æ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π AddButton.
    /// </remarks>
    public KeyboardBuilder AddButton(string emoji, string text, string callbackData)
    {
        var buttonText = string.IsNullOrEmpty(emoji) ? text : $"{emoji} {text}";
        return AddButton(buttonText, callbackData);
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É callback-–∫–Ω–æ–ø–æ–∫
    /// </summary>
    /// <param name="buttons">–ú–∞—Å—Å–∏–≤ –∫–æ—Ä—Ç–µ–∂–µ–π —Å —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏ callback</param>
    /// <returns>–≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä KeyboardBuilder –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤</returns>
    public KeyboardBuilder AddButtonRow(params (string text, string callbackData)[] buttons)
    {
        if (buttons.Length > _options.MaxButtonsPerRow)
        {
            HandleValidationFailure($"–°—Ç—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ {_options.MaxButtonsPerRow} –∫–Ω–æ–ø–æ–∫");
        }

        var buttonRow = new List<InlineKeyboardButton>();

        foreach (var (text, callbackData) in buttons)
        {
            ValidateButtonText(text);
            ValidateCallbackData(callbackData);
            buttonRow.Add(InlineKeyboardButton.WithCallbackData(text, callbackData));
        }

        _buttons.Add([.. buttonRow]);
        return this;
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
    /// </summary>
    /// <param name="meta">–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏</param>
    /// <param name="current">–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</param>
    /// <returns>–≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä KeyboardBuilder –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤</returns>
    public KeyboardBuilder AddSubscriptionButton(SubscriptionMeta meta, Subscribes current)
    {
        var isActive = current.HasFlag(meta.Subscription);
        var buttonText = $"{meta.Icon} {meta.DisplayName} {(isActive ? Emoji.Success : Emoji.Error)}";
        AddButton(buttonText, ToggleSubscriptionHandler.GetFormatedToggle(meta.Subscription));
        return this;
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç callback-–∫–Ω–æ–ø–∫—É –∫–∞–∫ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    /// </summary>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="callbackData">–î–∞–Ω–Ω—ã–µ callback</param>
    /// <returns>–≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä KeyboardBuilder –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤</returns>
    public KeyboardBuilder AddCallbackButton(string text, string callbackData)
    {
        return AddButton(text, callbackData);
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç URL-–∫–Ω–æ–ø–∫—É –∫–∞–∫ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    /// </summary>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="url">URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è</param>
    /// <returns>–≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä KeyboardBuilder –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤</returns>
    public KeyboardBuilder AddUrlButton(string text, string url)
    {
        ValidateButtonText(text);
        ValidateUrl(url);

        _buttons.Add([InlineKeyboardButton.WithUrl(text, url)]);
        return this;
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É Web App –∫–∞–∫ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    /// </summary>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="webAppUrl">URL Web App</param>
    /// <returns>–≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä KeyboardBuilder –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤</returns>
    public KeyboardBuilder AddWebAppButton(string text, string webAppUrl)
    {
        ValidateButtonText(text);
        ValidateUrl(webAppUrl);

        _buttons.Add([InlineKeyboardButton.WithWebApp(text, new(webAppUrl))]);
        return this;
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è inline-–∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    /// </summary>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="query">Inline-–∑–∞–ø—Ä–æ—Å</param>
    /// <returns>–≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä KeyboardBuilder –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤</returns>
    public KeyboardBuilder AddSwitchInlineButton(string text, string query)
    {
        ValidateButtonText(text);

        _buttons.Add([InlineKeyboardButton.WithSwitchInlineQuery(text, query)]);
        return this;
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è inline-–∑–∞–ø—Ä–æ—Å–∞ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ –∫–∞–∫ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    /// </summary>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="query">Inline-–∑–∞–ø—Ä–æ—Å</param>
    /// <returns>–≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä KeyboardBuilder –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤</returns>
    public KeyboardBuilder AddSwitchInlineCurrentChatButton(string text, string query)
    {
        ValidateButtonText(text);

        _buttons.Add([InlineKeyboardButton.WithSwitchInlineQueryCurrentChat(text, query)]);
        return this;
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É —Å –∏–∫–æ–Ω–∫–æ–π –∫–∞–∫ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    /// </summary>
    /// <param name="icon">–ò–∫–æ–Ω–∫–∞ –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="callbackData">–î–∞–Ω–Ω—ã–µ callback</param>
    /// <returns>–≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä KeyboardBuilder –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤</returns>
    public KeyboardBuilder AddButtonWithIcon(string icon, string text, string callbackData)
    {
        var displayText = $"{icon} {text}";
        return AddButton(displayText, callbackData);
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ
    /// </summary>
    /// <param name="condition">–£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</param>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="callbackData">–î–∞–Ω–Ω—ã–µ callback</param>
    /// <returns>–≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä KeyboardBuilder –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤</returns>
    public KeyboardBuilder AddButtonIf(bool condition, string text, string callbackData)
    {
        if (condition)
        {
            AddButton(text, callbackData);
        }

        return this;
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –ª–æ–∂–Ω–æ
    /// </summary>
    /// <param name="condition">–£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</param>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="callbackData">–î–∞–Ω–Ω—ã–µ callback</param>
    /// <returns>–≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä KeyboardBuilder –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤</returns>
    public KeyboardBuilder AddButtonUnless(bool condition, string text, string callbackData)
    {
        return AddButtonIf(!condition, text, callbackData);
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏-–ø—Ä–µ–¥–∏–∫–∞—Ç–∞
    /// </summary>
    /// <param name="predicate">–§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è true, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞</param>
    /// <param name="buttonFactory">–§—É–Ω–∫—Ü–∏—è, —Å–æ–∑–¥–∞—é—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–Ω–æ–ø–∫–∏</param>
    /// <returns>–≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä KeyboardBuilder –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤</returns>
    public KeyboardBuilder AddButtonWhen(Func<bool> predicate, Func<(string text, string callbackData)> buttonFactory)
    {
        if (predicate.Invoke() == false)
        {
            return this;
        }

        var (text, callbackData) = buttonFactory.Invoke();
        AddButton(text, callbackData);

        return this;
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é InlineKeyboardMarkup
    /// </summary>
    /// <returns>–≠–∫–∑–µ–º–ø–ª—è—Ä InlineKeyboardMarkup</returns>
    public InlineKeyboardMarkup Build()
    {
        if (_buttons.Count > _options.MaxRows)
        {
            HandleValidationFailure($"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ {_options.MaxRows} —Å—Ç—Ä–æ–∫");
        }

        return new(_buttons);
    }

    /// <summary>
    /// –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º —Å–µ—Ç–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–∞–±–ª–∏—Ü—ã
    /// </summary>
    /// <returns>–≠–∫–∑–µ–º–ø–ª—è—Ä GridBuilder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫</returns>
    public GridBuilder Grid()
    {
        return new(this, _options);
    }

    /// <summary>
    /// –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å
    /// </summary>
    /// <returns>–≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä KeyboardBuilder –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤</returns>
    public KeyboardBuilder Clear()
    {
        _buttons.Clear();
        return this;
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º
    /// </summary>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</param>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–µ –ø—É—Å—Ç–æ–π –∏ –µ–≥–æ –¥–ª–∏–Ω–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é.<br />
    /// –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è HandleValidationFailure —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.<br />
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ü–∏–π (ValidateButtonText = false).
    /// </remarks>
    public void ValidateButtonText(string text)
    {
        if (_options.ValidateButtonText == false)
        {
            return;
        }

        if (string.IsNullOrEmpty(text))
        {
            HandleValidationFailure("–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null –∏–ª–∏ –ø—É—Å—Ç—ã–º");
        }

        if (text.Length > _options.MaxButtonTextLength)
        {
            HandleValidationFailure($"–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å {_options.MaxButtonTextLength} —Å–∏–º–≤–æ–ª–æ–≤");
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ callback –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º
    /// </summary>
    /// <param name="callbackData">–î–∞–Ω–Ω—ã–µ callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</param>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ callback –Ω–µ –ø—É—Å—Ç—ã–µ –∏ –∏—Ö —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π.<br />
    /// –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è HandleValidationFailure —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.<br />
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ü–∏–π (ValidateCallbackData = false).
    /// </remarks>
    public void ValidateCallbackData(string callbackData)
    {
        if (_options.ValidateCallbackData == false)
        {
            return;
        }

        if (string.IsNullOrEmpty(callbackData))
        {
            HandleValidationFailure("–î–∞–Ω–Ω—ã–µ callback –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å null –∏–ª–∏ –ø—É—Å—Ç—ã–º–∏");
        }

        if (Encoding.UTF8.GetByteCount(callbackData) > _options.MaxCallbackDataLength)
        {
            HandleValidationFailure($"–î–∞–Ω–Ω—ã–µ callback –Ω–µ –º–æ–≥—É—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å {_options.MaxCallbackDataLength} –±–∞–π—Ç");
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç URL –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ —Ñ–æ—Ä–º–∞—Ç—É
    /// </summary>
    /// <param name="url">URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</param>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ URL –Ω–µ –ø—É—Å—Ç–æ–π –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ URI.<br />
    /// –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è HandleValidationFailure —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.<br />
    /// –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø—Ü–∏–π.
    /// </remarks>
    public void ValidateUrl(string url)
    {
        if (string.IsNullOrEmpty(url))
        {
            HandleValidationFailure("URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null –∏–ª–∏ –ø—É—Å—Ç—ã–º");
        }

        if (Uri.IsWellFormedUriString(url, UriKind.Absolute) == false)
        {
            HandleValidationFailure("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL");
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    /// </summary>
    /// <param name="message">–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ</param>
    /// <remarks>
    /// –ï—Å–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –æ–ø—Ü–∏–π –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –≤—ã–±—Ä–æ—Å–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π (ThrowOnValidationFailure = true),<br />
    /// –º–µ—Ç–æ–¥ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç ArgumentException —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.<br />
    /// –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.<br />
    /// –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∫–ª—é—á–∞—Ç—å —Ä–µ–∂–∏–º –≤—ã–±—Ä–æ—Å–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º.
    /// </remarks>
    public void HandleValidationFailure(string message)
    {
        if (_options.ThrowOnValidationFailure)
        {
            throw new ArgumentException(message);
        }
    }

    /// <summary>
    /// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∫–Ω–æ–ø–æ–∫
    /// </summary>
    /// <param name="buttonRow">–ú–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</param>
    internal void AddButtonRowInternal(InlineKeyboardButton[] buttonRow)
    {
        _buttons.Add(buttonRow);
    }
}
