using PomogatorBot.Web.Features.Keyboard;
using Telegram.Bot.Types.ReplyMarkups;

namespace PomogatorBot.Tests.Features.Keyboard;

[TestFixture]
public class KeyboardFactoryTests
{
    /// <summary>
    /// –ú–µ—Ç–æ–¥ CreateCallbackButton —Å –∏–∫–æ–Ω–∫–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–º —Å–æ–∑–¥–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ CreateCallbackButton –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏–∫–æ–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ callback –¥–∞–Ω–Ω—ã–µ.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ —Å –∏–∫–æ–Ω–∫–æ–π.
    /// </remarks>
    [Test]
    public void CreateCallbackButtonWithIconAndTextShouldCreateCorrectButton()
    {
        // Arrange
        const string Icon = "üìå";
        const string Text = "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å";
        const string CallbackData = "me";

        // Act
        var button = KeyboardFactory.CreateCallbackButton(Icon, Text, CallbackData);

        // Assert
        using (Assert.EnterMultipleScope())
        {
            Assert.That(button.Text, Is.EqualTo("üìå –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"));
            Assert.That(button.CallbackData, Is.EqualTo("me"));
        }
    }

    /// <summary>
    /// –ú–µ—Ç–æ–¥ CreateCallbackButton —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–∑–¥–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ CreateCallbackButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ callback –¥–∞–Ω–Ω—ã–µ.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏.
    /// </remarks>
    [Test]
    public void CreateCallbackButtonWithTextOnlyShouldCreateCorrectButton()
    {
        // Arrange
        const string Text = "–ü–æ–º–æ—â—å";
        const string CallbackData = "help";

        // Act
        var button = KeyboardFactory.CreateCallbackButton(Text, CallbackData);

        // Assert
        using (Assert.EnterMultipleScope())
        {
            Assert.That(button.Text, Is.EqualTo("–ü–æ–º–æ—â—å"));
            Assert.That(button.CallbackData, Is.EqualTo("help"));
        }
    }

    /// <summary>
    /// –ú–µ—Ç–æ–¥ CreateButtonRow —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ CreateButtonRow —Å–æ–∑–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å –¥–≤—É–º—è —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç–µ–∫—Å—Ç –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.
    /// </remarks>
    [Test]
    public void CreateButtonRowWithTwoButtonsShouldCreateRowWithTwoButtons()
    {
        // Arrange
        var leftButton = InlineKeyboardButton.WithCallbackData("Left", "left");
        var rightButton = InlineKeyboardButton.WithCallbackData("Right", "right");

        // Act
        var row = KeyboardFactory.CreateButtonRow(leftButton, rightButton);

        // Assert
        Assert.That(row, Has.Length.EqualTo(2));

        using (Assert.EnterMultipleScope())
        {
            Assert.That(row[0].Text, Is.EqualTo("Left"));
            Assert.That(row[1].Text, Is.EqualTo("Right"));
        }
    }

    /// <summary>
    /// –ú–µ—Ç–æ–¥ CreateButtonRow —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ CreateButtonRow —Å–æ–∑–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π.
    /// </remarks>
    [Test]
    public void CreateButtonRowWithSingleButtonShouldCreateRowWithOneButton()
    {
        // Arrange
        var button = InlineKeyboardButton.WithCallbackData("Single", "single");

        // Act
        var row = KeyboardFactory.CreateButtonRow(button);

        // Assert
        Assert.That(row, Has.Length.EqualTo(1));
        Assert.That(row[0].Text, Is.EqualTo("Single"));
    }

    /// <summary>
    /// –ú–µ—Ç–æ–¥ CreateConfirmationRow —Å–æ–∑–¥–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ CreateConfirmationRow —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –∏–º–µ–µ—Ç —Ç–µ–∫—Å—Ç –∏ callback –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ –∏–º–µ–µ—Ç —Ç–µ–∫—Å—Ç –∏ callback –¥–∞–Ω–Ω—ã–µ –æ—Ç–º–µ–Ω—ã.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è.
    /// </remarks>
    [Test]
    public void CreateConfirmationRowWithConfirmAndCancelShouldCreateCorrectRow()
    {
        // Arrange
        const string ConfirmText = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å";
        const string ConfirmCallback = "confirm_123";
        const string CancelText = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å";
        const string CancelCallback = "cancel_123";

        // Act
        var row = KeyboardFactory.CreateConfirmationRow(ConfirmText, ConfirmCallback, CancelText, CancelCallback);

        // Assert
        Assert.That(row, Has.Length.EqualTo(2));

        using (Assert.EnterMultipleScope())
        {
            Assert.That(row[0].Text, Is.EqualTo("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"));
            Assert.That(row[0].CallbackData, Is.EqualTo("confirm_123"));
            Assert.That(row[1].Text, Is.EqualTo("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"));
            Assert.That(row[1].CallbackData, Is.EqualTo("cancel_123"));
        }
    }

    /// <summary>
    /// –ú–µ—Ç–æ–¥ CreateBackButton —Å–æ–∑–¥–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ callback –¥–∞–Ω–Ω—ã–º–∏.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ CreateBackButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º "üîô –ù–∞–∑–∞–¥".<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ callback –¥–∞–Ω–Ω—ã–µ.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥.
    /// </remarks>
    [Test]
    public void CreateBackButtonWithCallbackDataShouldCreateCorrectBackButton()
    {
        // Arrange
        const string CallbackData = "menu_back";

        // Act
        var button = KeyboardFactory.CreateBackButton(CallbackData);

        // Assert
        using (Assert.EnterMultipleScope())
        {
            Assert.That(button.Text, Is.EqualTo("üîô –ù–∞–∑–∞–¥"));
            Assert.That(button.CallbackData, Is.EqualTo("menu_back"));
        }
    }

    /// <summary>
    /// –ú–µ—Ç–æ–¥ CreateCallbackButton –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—É—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑ –≤—ã–±—Ä–æ—Å–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Å—Ç–æ–π –∏–∫–æ–Ω–∫–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–æ–º –∏ callback –¥–∞–Ω–Ω—ã–º–∏.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–æ–π –∏ callback –¥–∞–Ω–Ω—ã–º–∏.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Å—Ç—ã—Ö callback –¥–∞–Ω–Ω—ã—Ö —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–º.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –º–µ—Ç–æ–¥–∞ –∫ –≥—Ä–∞–Ω–∏—á–Ω—ã–º —Å–ª—É—á–∞—è–º –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    /// </remarks>
    /// <param name="icon">–ò–∫–æ–Ω–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π</param>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π</param>
    /// <param name="callbackData">Callback –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π</param>
    [Test]
    [TestCase("", "text", "callback")]
    [TestCase("üéØ", "", "callback")]
    [TestCase("üéØ", "text", "")]
    public void CreateCallbackButtonWithEmptyParametersShouldHandleGracefully(string icon, string text, string callbackData)
    {
        // Act & Assert
        Assert.DoesNotThrow(() => KeyboardFactory.CreateCallbackButton(icon, text, callbackData));
    }

    /// <summary>
    /// –ú–µ—Ç–æ–¥ CreateCallbackButton (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç) –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—É—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑ –≤—ã–±—Ä–æ—Å–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ callback –¥–∞–Ω–Ω—ã–º–∏.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Å—Ç—ã—Ö callback –¥–∞–Ω–Ω—ã—Ö —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –∫ –≥—Ä–∞–Ω–∏—á–Ω—ã–º —Å–ª—É—á–∞—è–º –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    /// </remarks>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π</param>
    /// <param name="callbackData">Callback –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π</param>
    [Test]
    [TestCase("", "callback")]
    [TestCase("text", "")]
    public void CreateCallbackButtonTextOnlyWithEmptyParametersShouldHandleGracefully(string text, string callbackData)
    {
        // Act & Assert
        Assert.DoesNotThrow(() => KeyboardFactory.CreateCallbackButton(text, callbackData));
    }

    /// <summary>
    /// –ú–µ—Ç–æ–¥ CreateConfirmationRow –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—É—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑ –≤—ã–±—Ä–æ—Å–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –ø—É—Å—Ç—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –º–µ—Ç–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫ –≥—Ä–∞–Ω–∏—á–Ω—ã–º —Å–ª—É—á–∞—è–º.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    /// </remarks>
    [Test]
    public void CreateConfirmationRowWithEmptyParametersShouldHandleGracefully()
    {
        // Act & Assert
        Assert.DoesNotThrow(() => KeyboardFactory.CreateConfirmationRow("", "", "", ""));
    }

    /// <summary>
    /// –ú–µ—Ç–æ–¥ CreateBackButton –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—É—Å—Ç—ã–µ callback –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –≤—ã–±—Ä–æ—Å–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Å—Ç—ã—Ö callback –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥".<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –º–µ—Ç–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –≥—Ä–∞–Ω–∏—á–Ω—ã–º —Å–ª—É—á–∞—è–º.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø—É—Å—Ç—ã—Ö callback –¥–∞–Ω–Ω—ã—Ö.
    /// </remarks>
    [Test]
    public void CreateBackButtonWithEmptyCallbackDataShouldHandleGracefully()
    {
        // Act & Assert
        Assert.DoesNotThrow(() => KeyboardFactory.CreateBackButton(""));
    }
}
