using PomogatorBot.Web.Features.Keyboard;

namespace PomogatorBot.Tests.Features.Keyboard;

[TestFixture]
public class GridBuilderTests
{
    [SetUp]
    public void SetUp()
    {
        _builder = KeyboardBuilder.Create();
    }

    private KeyboardBuilder _builder = null!;

    /// <summary>
    /// –ú–µ—Ç–æ–¥ Grid –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä GridBuilder.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ Grid –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ null –æ–±—ä–µ–∫—Ç.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç —è–≤–ª—è–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º GridBuilder.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ —Å–µ—Ç–∫–∏.
    /// </remarks>
    [Test]
    public void GridReturnsGridBuilderInstance()
    {
        // Act
        var gridBuilder = _builder.Grid();

        // Assert
        using (Assert.EnterMultipleScope())
        {
            Assert.That(gridBuilder, Is.Not.Null);
            Assert.That(gridBuilder, Is.InstanceOf<GridBuilder>());
        }
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –≤ —Å–µ—Ç–∫—É –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ AddButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ —Å–µ—Ç–∫–∏.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ End –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ—ë –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ Build —Å–æ–∑–¥–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –∏ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π.
    /// </remarks>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</param>
    /// <param name="callbackData">Callback –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</param>
    [TestCase("Button 1", "btn1")]
    [TestCase("–ö–Ω–æ–ø–∫–∞ 1", "–∫–Ω–æ–ø–∫–∞1")]
    [TestCase("üéØ Target", "target")]
    public void AddButtonAndEndCreatesSingleButtonRow(string text, string callbackData)
    {
        // Act
        var keyboard = _builder
            .Grid()
            .AddButton(text, callbackData)
            .End()
            .Build();

        // Assert
        var rows = keyboard.InlineKeyboard.ToArray();
        var firstRow = rows[0].ToArray();

        using (Assert.EnterMultipleScope())
        {
            Assert.That(rows, Has.Length.EqualTo(1));
            Assert.That(firstRow, Has.Length.EqualTo(1));
            Assert.That(firstRow[0].Text, Is.EqualTo(text));
            Assert.That(firstRow[0].CallbackData, Is.EqualTo(callbackData));
        }
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å–µ—Ç–∫–∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã–∑–æ–≤–æ–≤ AddButton –¥–æ–±–∞–≤–ª—è—é—Ç –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ End –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–Ω–æ–ø–æ–∫.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏.
    /// </remarks>
    [Test]
    public void AddMultipleButtonsInSameRowCreatesRowWithMultipleButtons()
    {
        // Act
        var keyboard = _builder
            .Grid()
            .AddButton("Button 1", "btn1")
            .AddButton("Button 2", "btn2")
            .AddButton("Button 3", "btn3")
            .End()
            .Build();

        // Assert
        var rows = keyboard.InlineKeyboard.ToArray();
        var firstRow = rows[0].ToArray();

        using (Assert.EnterMultipleScope())
        {
            Assert.That(rows, Has.Length.EqualTo(1));
            Assert.That(firstRow, Has.Length.EqualTo(3));
            Assert.That(firstRow[0].Text, Is.EqualTo("Button 1"));
            Assert.That(firstRow[1].Text, Is.EqualTo("Button 2"));
            Assert.That(firstRow[2].Text, Is.EqualTo("Button 3"));
        }
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ End —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å–µ—Ç–∫–µ.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–π —Å–µ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫.
    /// </remarks>
    [Test]
    public void CreateMultipleRowsInGridCreatesCorrectStructure()
    {
        // Act
        var keyboard = _builder
            .Grid()
            .AddButton("Button 1", "btn1")
            .AddButton("Button 2", "btn2")
            .End()
            .AddButton("Button 3", "btn3")
            .AddButton("Button 4", "btn4")
            .AddButton("Button 5", "btn5")
            .End()
            .AddButton("Button 6", "btn6")
            .End()
            .Build();

        // Assert
        var rows = keyboard.InlineKeyboard.ToArray();

        using (Assert.EnterMultipleScope())
        {
            Assert.That(rows, Has.Length.EqualTo(3));

            // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: 2 –∫–Ω–æ–ø–∫–∏
            var firstRow = rows[0].ToArray();
            Assert.That(firstRow, Has.Length.EqualTo(2));
            Assert.That(firstRow[0].Text, Is.EqualTo("Button 1"));
            Assert.That(firstRow[1].Text, Is.EqualTo("Button 2"));

            // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: 3 –∫–Ω–æ–ø–∫–∏
            var secondRow = rows[1].ToArray();
            Assert.That(secondRow, Has.Length.EqualTo(3));
            Assert.That(secondRow[0].Text, Is.EqualTo("Button 3"));
            Assert.That(secondRow[1].Text, Is.EqualTo("Button 4"));
            Assert.That(secondRow[2].Text, Is.EqualTo("Button 5"));

            // –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞: 1 –∫–Ω–æ–ø–∫–∞
            var thirdRow = rows[2].ToArray();
            Assert.That(thirdRow, Has.Length.EqualTo(1));
            Assert.That(thirdRow[0].Text, Is.EqualTo("Button 6"));
        }
    }

    /// <summary>
    /// –ú–µ—Ç–æ–¥ Build –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å–µ—Ç–∫–µ.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ Build –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç End –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –±–µ–∑ —è–≤–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ End –ø–µ—Ä–µ–¥ Build.
    /// </remarks>
    [Test]
    public void BuildAutomaticallyEndsCurrentRow()
    {
        // Act
        var keyboard = _builder
            .Grid()
            .AddButton("Button 1", "btn1")
            .AddButton("Button 2", "btn2")
            .Build(); // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º End —è–≤–Ω–æ

        // Assert
        var rows = keyboard.InlineKeyboard.ToArray();
        var firstRow = rows[0].ToArray();

        using (Assert.EnterMultipleScope())
        {
            Assert.That(rows, Has.Length.EqualTo(1));
            Assert.That(firstRow, Has.Length.EqualTo(2));
            Assert.That(firstRow[0].Text, Is.EqualTo("Button 1"));
            Assert.That(firstRow[1].Text, Is.EqualTo("Button 2"));
        }
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ URL –∫–Ω–æ–ø–∫–∏ –≤ —Å–µ—Ç–∫—É —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ AddUrlButton —Å–æ–∑–¥–∞–µ—Ç URL –∫–Ω–æ–ø–∫—É –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–Ω–æ–ø–æ–∫ –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏.
    /// </remarks>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</param>
    /// <param name="url">URL –¥–ª—è –∫–Ω–æ–ø–∫–∏</param>
    [TestCase("Visit Site", "https://example.com")]
    [TestCase("–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", "https://test.ru")]
    public void AddUrlButtonInGridCreatesUrlButton(string text, string url)
    {
        // Act
        var keyboard = _builder
            .Grid()
            .AddUrlButton(text, url)
            .Build();

        // Assert
        var button = keyboard.InlineKeyboard.First().First();

        using (Assert.EnterMultipleScope())
        {
            Assert.That(button.Text, Is.EqualTo(text));
            Assert.That(button.Url, Is.EqualTo(url));
        }
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –∏–∫–æ–Ω–∫–æ–π –≤ —Å–µ—Ç–∫—É –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏–∫–æ–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ AddButtonWithIcon —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ callback –¥–∞–Ω–Ω—ã–µ.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–Ω–æ–ø–æ–∫ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏.
    /// </remarks>
    /// <param name="icon">–ò–∫–æ–Ω–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="callbackData">Callback –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏</param>
    /// <param name="expectedText">–û–∂–∏–¥–∞–µ–º—ã–π –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</param>
    [TestCase("üéØ", "Target", "target_callback", "üéØ Target")]
    [TestCase("üìä", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stats", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
    public void AddButtonWithIconInGridCombinesIconAndText(string icon, string text, string callbackData, string expectedText)
    {
        // Act
        var keyboard = _builder
            .Grid()
            .AddButtonWithIcon(icon, text, callbackData)
            .Build();

        // Assert
        var button = keyboard.InlineKeyboard.First().First();

        using (Assert.EnterMultipleScope())
        {
            Assert.That(button.Text, Is.EqualTo(expectedText));
            Assert.That(button.CallbackData, Is.EqualTo(callbackData));
        }
    }

    /// <summary>
    /// –£—Å–ª–æ–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å–µ—Ç–∫—É —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ AddButtonIf –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏—Å—Ç–∏–Ω–Ω–æ–º —É—Å–ª–æ–≤–∏–∏ –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ –ª–æ–∂–Ω–æ–º —É—Å–ª–æ–≤–∏–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–µ—Ç–∫—É.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É —É—Å–ª–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏.
    /// </remarks>
    /// <param name="condition">–õ–æ–≥–∏—á–µ—Å–∫–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –≤ —Å–µ—Ç–∫—É</param>
    /// <param name="shouldAddButton">–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: true –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞, false –µ—Å–ª–∏ –Ω–µ –¥–æ–ª–∂–Ω–∞</param>
    [TestCase(true, true)]
    [TestCase(false, false)]
    public void AddButtonIfInGridAddsButtonBasedOnCondition(bool condition, bool shouldAddButton)
    {
        // Act
        var keyboard = _builder
            .Grid()
            .AddButtonIf(condition, "Conditional", "conditional_callback")
            .Build();

        // Assert
        Assert.That(keyboard.InlineKeyboard.Any(), Is.EqualTo(shouldAddButton));

        if (shouldAddButton)
        {
            Assert.That(keyboard.InlineKeyboard.First().First().Text, Is.EqualTo("Conditional"));
        }
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ —Å–µ—Ç–∫—É –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç ArgumentException –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—É—Å—Ç—ã–µ callback –¥–∞–Ω–Ω—ã–µ –≤—ã–∑—ã–≤–∞—é—Ç ArgumentException –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏.
    /// </remarks>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</param>
    /// <param name="callbackData">Callback –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</param>
    /// <param name="expectedExceptionType">–û–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–±—Ä–æ—à–µ–Ω–æ –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</param>
    [TestCase("", "callback", typeof(ArgumentException))]
    [TestCase("Text", "", typeof(ArgumentException))]
    public void AddButtonWithInvalidInputInGridThrowsException(string text, string callbackData, Type expectedExceptionType)
    {
        // Act & Assert
        Assert.Throws(expectedExceptionType, () => _builder.Grid().AddButton(text, callbackData));
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ URL –∫–Ω–æ–ø–∫–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º URL –≤ —Å–µ—Ç–∫—É –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL –≤—ã–∑—ã–≤–∞–µ—Ç ArgumentException –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏.
    /// </remarks>
    [Test]
    public void AddUrlButtonWithInvalidUrlInGridThrowsException()
    {
        // Act & Assert
        Assert.Throws<ArgumentException>(() => _builder.Grid().AddUrlButton("Link", "not-a-url"));
    }

    /// <summary>
    /// –í—ã–∑–æ–≤ End –Ω–∞ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ End –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫.
    /// </remarks>
    [Test]
    public void EndOnEmptyRowDoesNotCreateRow()
    {
        // Act
        var keyboard = _builder
            .Grid()
            .End() // –í—ã–∑—ã–≤–∞–µ–º End –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
            .AddButton("Button 1", "btn1")
            .Build();

        // Assert
        var rows = keyboard.InlineKeyboard.ToArray();

        using (Assert.EnterMultipleScope())
        {
            Assert.That(rows, Has.Length.EqualTo(1));
            var firstRow = rows[0].ToArray();
            Assert.That(firstRow, Has.Length.EqualTo(1));
            Assert.That(firstRow[0].Text, Is.EqualTo("Button 1"));
        }
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ Switch Inline –≤ —Å–µ—Ç–∫—É —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ AddSwitchInlineButton —Å–æ–∑–¥–∞–µ—Ç inline –∫–Ω–æ–ø–∫—É –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π inline –∑–∞–ø—Ä–æ—Å.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É inline –∫–Ω–æ–ø–æ–∫ –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏.
    /// </remarks>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</param>
    /// <param name="query">Inline –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–Ω–æ–ø–∫–∏</param>
    [TestCase("Search", "search query")]
    [TestCase("–ü–æ–∏—Å–∫", "–∑–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞")]
    public void AddSwitchInlineButtonInGridCreatesSwitchInlineButton(string text, string query)
    {
        // Act
        var keyboard = _builder
            .Grid()
            .AddSwitchInlineButton(text, query)
            .Build();

        // Assert
        var button = keyboard.InlineKeyboard.First().First();

        using (Assert.EnterMultipleScope())
        {
            Assert.That(button.Text, Is.EqualTo(text));
            Assert.That(button.SwitchInlineQuery, Is.EqualTo(query));
        }
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ Switch Inline Current Chat –≤ —Å–µ—Ç–∫—É —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ AddSwitchInlineCurrentChatButton —Å–æ–∑–¥–∞–µ—Ç inline –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π inline –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É inline –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏.
    /// </remarks>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</param>
    /// <param name="query">Inline –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ</param>
    [TestCase("Search Here", "search in chat")]
    [TestCase("–ü–æ–∏—Å–∫ –∑–¥–µ—Å—å", "–ø–æ–∏—Å–∫ –≤ —á–∞—Ç–µ")]
    public void AddSwitchInlineCurrentChatButtonInGridCreatesSwitchInlineCurrentChatButton(string text, string query)
    {
        // Act
        var keyboard = _builder
            .Grid()
            .AddSwitchInlineCurrentChatButton(text, query)
            .Build();

        // Assert
        var button = keyboard.InlineKeyboard.First().First();

        using (Assert.EnterMultipleScope())
        {
            Assert.That(button.Text, Is.EqualTo(text));
            Assert.That(button.SwitchInlineQueryCurrentChat, Is.EqualTo(query));
        }
    }

    /// <summary>
    /// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ KeyboardBuilder —Å —Ä–µ–∂–∏–º–æ–º —Å–µ—Ç–∫–∏.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–æ–∂–Ω–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã KeyboardBuilder —Å —Ä–µ–∂–∏–º–æ–º —Å–µ—Ç–∫–∏.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –ø—Ä–∏ —Å–º–µ—à–∞–Ω–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    /// </remarks>
    [Test]
    public void IntegrationTestCombiningNormalAndGridModes()
    {
        // Act
        var keyboard = _builder
            .AddButton("–û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞", "normal") // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
            .Grid() // –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Å–µ—Ç–∫–∏
            .AddButton("–°–µ—Ç–∫–∞ 1", "grid1")
            .AddButton("–°–µ—Ç–∫–∞ 2", "grid2")
            .End()
            .AddButton("–°–µ—Ç–∫–∞ 3", "grid3")
            .Build(); // Build –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —Å–µ—Ç–∫–∏

        // Assert
        var rows = keyboard.InlineKeyboard.ToArray();

        using (Assert.EnterMultipleScope())
        {
            Assert.That(rows, Has.Length.EqualTo(3));

            // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –æ–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞
            var firstRow = rows[0].ToArray();
            Assert.That(firstRow, Has.Length.EqualTo(1));
            Assert.That(firstRow[0].Text, Is.EqualTo("–û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞"));

            // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: —Å–µ—Ç–∫–∞ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
            var secondRow = rows[1].ToArray();
            Assert.That(secondRow, Has.Length.EqualTo(2));
            Assert.That(secondRow[0].Text, Is.EqualTo("–°–µ—Ç–∫–∞ 1"));
            Assert.That(secondRow[1].Text, Is.EqualTo("–°–µ—Ç–∫–∞ 2"));

            // –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞: —Å–µ—Ç–∫–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ Build())
            var thirdRow = rows[2].ToArray();
            Assert.That(thirdRow, Has.Length.EqualTo(1));
            Assert.That(thirdRow[0].Text, Is.EqualTo("–°–µ—Ç–∫–∞ 3"));
        }
    }

    /// <summary>
    /// –ú–µ—Ç–æ–¥ AddButton —Å —ç–º–æ–¥–∑–∏ –≤ —Å–µ—Ç–∫–µ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ AddButton —Å —ç–º–æ–¥–∑–∏ —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –ø—Ä–æ–±–µ–ª–æ–º –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ callback –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ AddButton –≤ GridBuilder.
    /// </remarks>
    /// <param name="emoji">–≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –≤ —Å–µ—Ç–∫–µ</param>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏ –≤ —Å–µ—Ç–∫–µ</param>
    /// <param name="callbackData">Callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Å–µ—Ç–∫–µ</param>
    /// <param name="expectedText">–û–∂–∏–¥–∞–µ–º—ã–π –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ —Å–µ—Ç–∫–µ</param>
    [TestCase("üéØ", "–¶–µ–ª—å", "target", "üéØ –¶–µ–ª—å")]
    [TestCase("üìä", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stats", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
    [TestCase("‚öôÔ∏è", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    [TestCase("üè†", "–ì–ª–∞–≤–Ω–∞—è", "home", "üè† –ì–ª–∞–≤–Ω–∞—è")]
    public void AddButtonWithEmojiInGridCombinesEmojiAndText(string emoji, string text, string callbackData, string expectedText)
    {
        // Act
        var keyboard = _builder
            .Grid()
            .AddButton(emoji, text, callbackData)
            .Build();

        // Assert
        var button = keyboard.InlineKeyboard.First().First();

        using (Assert.EnterMultipleScope())
        {
            Assert.That(button.Text, Is.EqualTo(expectedText));
            Assert.That(button.CallbackData, Is.EqualTo(callbackData));
        }
    }

    /// <summary>
    /// –ú–µ—Ç–æ–¥ AddButton —Å –ø—É—Å—Ç—ã–º —ç–º–æ–¥–∑–∏ –≤ —Å–µ—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ –ø—É—Å—Ç–æ–º —ç–º–æ–¥–∑–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ null —ç–º–æ–¥–∑–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –≤ GridBuilder.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ callback –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏.
    /// </remarks>
    /// <param name="emoji">–ü—É—Å—Ç–æ–µ –∏–ª–∏ null –∑–Ω–∞—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –≤ —Å–µ—Ç–∫–µ</param>
    /// <param name="text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –µ—Å—Ç—å –≤ —Å–µ—Ç–∫–µ</param>
    /// <param name="callbackData">Callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Å–µ—Ç–∫–µ</param>
    [TestCase("", "–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç", "text_only")]
    public void AddButtonWithEmptyEmojiInGridUsesOnlyText(string emoji, string text, string callbackData)
    {
        // Act
        var keyboard = _builder
            .Grid()
            .AddButton(emoji, text, callbackData)
            .Build();

        // Assert
        var button = keyboard.InlineKeyboard.First().First();

        using (Assert.EnterMultipleScope())
        {
            Assert.That(button.Text, Is.EqualTo(text));
            Assert.That(button.CallbackData, Is.EqualTo(callbackData));
        }
    }

    /// <summary>
    /// –ú–µ—Ç–æ–¥ AddButton —Å —ç–º–æ–¥–∑–∏ –≤ —Å–µ—Ç–∫–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–π —Å–µ—Ç–∫–∏.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ AddButton —Å —ç–º–æ–¥–∑–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å —ç–º–æ–¥–∑–∏.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å fluent API –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤ GridBuilder.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫ —Å —ç–º–æ–¥–∑–∏.
    /// </remarks>
    [Test]
    public void AddButtonWithEmojiInGridSupportsMultiRowGrid()
    {
        // Act
        var keyboard = _builder
            .Grid()
            .AddButton("üè†", "–ì–ª–∞–≤–Ω–∞—è", "home")
            .AddButton("üìä", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stats")
            .End()
            .AddButton("‚öôÔ∏è", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings")
            .AddButton("‚ùì", "–ü–æ–º–æ—â—å", "help")
            .End()
            .AddButton("üö™", "–í—ã—Ö–æ–¥", "exit")
            .Build();

        // Assert
        var rows = keyboard.InlineKeyboard.ToArray();

        using (Assert.EnterMultipleScope())
        {
            Assert.That(rows, Has.Length.EqualTo(3));

            // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: 2 –∫–Ω–æ–ø–∫–∏ —Å —ç–º–æ–¥–∑–∏
            var firstRow = rows[0].ToArray();
            Assert.That(firstRow, Has.Length.EqualTo(2));
            Assert.That(firstRow[0].Text, Is.EqualTo("üè† –ì–ª–∞–≤–Ω–∞—è"));
            Assert.That(firstRow[1].Text, Is.EqualTo("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"));

            // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: 2 –∫–Ω–æ–ø–∫–∏ —Å —ç–º–æ–¥–∑–∏
            var secondRow = rows[1].ToArray();
            Assert.That(secondRow, Has.Length.EqualTo(2));
            Assert.That(secondRow[0].Text, Is.EqualTo("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"));
            Assert.That(secondRow[1].Text, Is.EqualTo("‚ùì –ü–æ–º–æ—â—å"));

            // –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞: 1 –∫–Ω–æ–ø–∫–∞ —Å —ç–º–æ–¥–∑–∏
            var thirdRow = rows[2].ToArray();
            Assert.That(thirdRow, Has.Length.EqualTo(1));
            Assert.That(thirdRow[0].Text, Is.EqualTo("üö™ –í—ã—Ö–æ–¥"));
        }
    }

    /// <summary>
    /// –ú–µ—Ç–æ–¥ AddButton —Å —ç–º–æ–¥–∑–∏ –≤ —Å–µ—Ç–∫–µ —Å–æ–≤–º–µ—Å—Ç–∏–º —Å –¥—Ä—É–≥–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ GridBuilder.
    /// </summary>
    /// <remarks>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ AddButton —Å —ç–º–æ–¥–∑–∏ –º–æ–∂–Ω–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Å –æ–±—ã—á–Ω—ã–º AddButton –≤ —Å–µ—Ç–∫–µ.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ AddButton —Å —ç–º–æ–¥–∑–∏ –º–æ–∂–Ω–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ —Ç–∏–ø–∞–º–∏ –∫–Ω–æ–ø–æ–∫ –≤ —Å–µ—Ç–∫–µ.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API GridBuilder.<br />
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—à–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫.
    /// </remarks>
    [Test]
    public void AddButtonWithEmojiInGridIsCompatibleWithOtherMethods()
    {
        // Act
        var keyboard = _builder
            .Grid()
            .AddButton("üè†", "–ì–ª–∞–≤–Ω–∞—è", "home")
            .AddButton("–û–±—ã—á–Ω–∞—è", "normal")
            .AddUrlButton("–°–∞–π—Ç", "https://example.com")
            .End()
            .AddButton("‚öôÔ∏è", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings")
            .Build();

        // Assert
        var rows = keyboard.InlineKeyboard.ToArray();

        using (Assert.EnterMultipleScope())
        {
            Assert.That(rows, Has.Length.EqualTo(2));

            // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: —Å–º–µ—à–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –∫–Ω–æ–ø–æ–∫
            var firstRow = rows[0].ToArray();
            Assert.That(firstRow, Has.Length.EqualTo(3));
            Assert.That(firstRow[0].Text, Is.EqualTo("üè† –ì–ª–∞–≤–Ω–∞—è"));
            Assert.That(firstRow[1].Text, Is.EqualTo("–û–±—ã—á–Ω–∞—è"));
            Assert.That(firstRow[2].Text, Is.EqualTo("–°–∞–π—Ç"));

            // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –∫–Ω–æ–ø–∫–∞ —Å —ç–º–æ–¥–∑–∏
            var secondRow = rows[1].ToArray();
            Assert.That(secondRow, Has.Length.EqualTo(1));
            Assert.That(secondRow[0].Text, Is.EqualTo("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"));
        }
    }
}
